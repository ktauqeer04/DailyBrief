// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model People {
  id                    Int            @id @default(autoincrement())
  name                  String         @db.VarChar(191)
  email                 String         @unique @db.VarChar(191)
  password              String
  profile               String?
  is_verified           Boolean        @default(false)
  verification_token    String?
  created_at            DateTime       @default(now())
  updated_at            DateTime       @default(now())


  News                  News[]
  subscriptions         Subscription[] @relation("UserSubscriptions")
  authoredSubscriptions Subscription[] @relation("AuthorSubscriptions")
  SavedPost             savePost[]
}

model News {
  id         Int      @id @default(autoincrement())
  author_id  Int
  author     People   @relation(fields: [author_id], references: [id])
  title      String   @db.VarChar
  content    String
  image      String   @db.VarChar(100)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  comments   Comment[] 
  savePost   savePost[]
}

model Subscription {
  id         Int      @id @default(autoincrement())
  author_id  Int
  user_id    Int
  created_at DateTime @default(now())

  user   People @relation("UserSubscriptions", fields: [user_id], references: [id])
  author People @relation("AuthorSubscriptions", fields: [author_id], references: [id])
}


model Comment{
  id                    Int            @id  @default(autoincrement())
  post_id               Int      
  post                  News           @relation(fields: [post_id], references: [id])
  commenter_name        String  
  comment_description   String   
  likes                 Int
  created_at            DateTime       @default(now())
  updated_at            DateTime       @default(now())
}


model savePost{
  id                    Int             @id @default(autoincrement())
  user_id               Int
  post_id               Int      
  post                  News           @relation(fields: [post_id], references: [id])
  user                  People         @relation(fields: [user_id], references: [id])
  created_at            DateTime       @default(now())
}